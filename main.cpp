#include "Assignment6.cpp"
#include <iostream>


using namespace std;

int main (int argc, char **argv)
{

  /*BubbleSort bubble;
  SelectionSort select;
  InsertionSort insert;
  QuickSort quick;
  double arr[] = {563,884,626,70,906,445,620,38,99,358,480,780,548,269,299,438,838,714,631,960,50,899,368,649,126,475,504,895,411,272,514,219,282,354,116,802,420,495,492,725,988,157,415,983,324,380,721,217,676,236,927,900,992,69,399,565,786,128,22,719,167,575,586,308,377,547,81,875,121,897,816,892,590,94,432,425,344,125,692,23,921,306,223,506,638,30,855,287,317,214,872,606,12,746,261,853,104,817,295,795,608,818,787,20,414,711,847,468,756,1000,55,574,778,406,21,293,294,474,846,745,727,850,436,89,186,580,808,604,839,601,442,404,851,984,812,530,613,355,312,849,856,511,741,543,106,696,830,581,473,382,51,111,265,949,865,614,136,477,639,155,164,243,274,593,713,646,687,330,365,724,422,991,777,945,544,825,131,227,469,298,182,598,994,920,191,259,712,799,686,882,677,841,450,222,77,643,955,428,784,231,924,775,729,410,27,800,679,957,285,461,932,589,239,937,421,234,256,788,770,671,363,147,651,715,63,36,361,481,681,674,619,33,140,278,656,66,502,583,848,525,634,107,764,53,748,424,172,707,162,154,668,5,541,384,585,310,443,329,947,950,571,271,264,688,814,7,890,460,997,959,931,292,858,944,78,464,578,792,552,4,896,615,486,389,225,512,148,248,458,612,332,260,165,386,189,180,174,503,518,867,731,670,644,138,444,754,669,702,776,871,558,484,596,57,232,603,587,774,252,10,843,524,546,730,645,237,953,521,2,129,616,59,582,609,806,675,916,409,412,840,367,698,861,877,47,695,888,903,403,689,263,43,40,989,315,528,8,87,629,894,218,761,137,307,266,338,110,940,652,961,749,722,331,235,901,103,834,821,836,452,500,632,437,535,170,516,394,700,302,181,621,699,216,507,915,479,750,62,296,426,139,130,462,244,520,320,837,577,964,288,958,493,335,556,939,395,156,85,328,734,161,554,658,120,457,732,73,286,210,551,887,202,434,647,904,309,977,605,3,826,630,151,427,429,314,247,203,706,844,536,529,117,190,246,573,75,659,567,505,759,803,779,305,591,494,56,160,466,911,476,204,798,183,283,208,230,364,342,347,625,316,169,618,46,64,184,935,690,416,636,373,454,898,280,49,102,829,845,187,923,801,249,743,29,878,371,86,766,359,933,733,703,28,267,956,716,880,708,673,824,657,693,976,691,254,562,113,744,980,758,967,150,211,390,258,913,17,284,349,728,570,343,146,683,979,489,907,31,820,26,176,537,240,483,999,757,253,6,141,579,91,213,67,717,163,828,633,497,995,345,946,566,948,441,813,401,881,641,198,290,611,488,413,199,879,52,863,951,522,962,188,1,175,739,275,560,385,747,640,318,447,134,499,796,114,769,193,45,869,491,391,531,860,740,95,623,212,934,60,595,952,919,572,251,986,123,791,402,768,370,159,168,194,383,90,981,943,11,929,325,79,672,648,909,366,297,893,662,666,607,375,405,594,311,918,533,842,408,158,910,407,273,400,982,467,773,971,908,694,627,14,238,289,527,682,326,423,357,201,392,84,233,323,144,553,322,279,304,229,517,448,242,925,760,300,119,576,667,435,319,482,781,793,886,65,785,664,379,179,928,822,470,628,709,993,149,19,804,685,509,549,207,221,642,334,852,974,350,857,419,498,241,327,381,726,704,374,220,710,245,346,874,538,678,431,122,718,362,663,539,970,912,588,37,523,277,954,902,25,336,938,973,418,966,83,868,972,24,205,465,76,356,35,97,789,569,873,602,561,108,197,510,171,224,430,142,490,650,101,680,885,92,352,433,93,200,965,832,866,118,439,809,115,88,513,736,794,735,526,969,145,449,471,61,545,487,738,914,143,109,540,397,153,417,550,922,975,557,815,653,276,42,835,859,393,456,80,262,936,152,339,485,226,996,135,132,351,705,635,173,41,72,268,968,501,819,665,388,654,206,341,313,195,228,905,515,990,864,178,192,987,637,508,891,58,440,742,763,762,44,862,823,463,348,459,723,790,446,321,978,765,54,337,100,985,353,82,105,281,930,166,559,453,568,398,753,250,127,32,771,48,378,941,660,889,387,303,833,270,783,71,624,74,124,599,622,478,340,396,555,617,827,720,926,592,39,177,257,752,96,876,34,942,360,697,215,564,600,451,797,519,133,376,369,751,831,917,854,13,963,870,291,301,584,372,532,811,807,472,98,810,255,883,610,9,755,333,455,209,15,68,16,737,496,805,112,782,534,542,772,655,661,185,597,684,196,998,701,767,18};*/

  //int n = sizeof(arr)/sizeof(arr[0]);

  Simulator sim;
  sim.Run();

  /*auto start = high_resolution_clock::now();
  bubble.runBubbleSort(arr, n);
  auto stop = high_resolution_clock::now();

  auto duration = duration_cast<microseconds>(stop - start);

  cout << "Time taken by function bubble: "
           << duration.count() << " microseconds" << endl;*/


   /*auto start = high_resolution_clock::now();
   select.runSelectionSort(arr, n);
   auto stop = high_resolution_clock::now();

   auto duration = duration_cast<microseconds>(stop - start);

   cout << "Time taken by function selection: "
            << duration.count() << " microseconds" << endl;*/

    /*auto start = high_resolution_clock::now();
    insert.runInsertionSort(arr, n);
    auto stop = high_resolution_clock::now();

    auto duration = duration_cast<microseconds>(stop - start);

    cout << "Time taken by function insertion: "
             << duration.count() << " microseconds" << endl;*/

   /*auto start = high_resolution_clock::now();
   quick.runQuickSort(arr, 0, n-1);
   auto stop = high_resolution_clock::now();

   auto duration = duration_cast<microseconds>(stop - start);

   cout << "Time taken by function quick: "
            << duration.count() << " microseconds" << endl;

    for (int i = 0; i < n; i++)
    {
      cout << (arr[i]) << endl;
    }*/

  return 0;
}
